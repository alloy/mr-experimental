* Decide a way to test methods that are only visible given a specific
command-line option. For example, Kernel#gsub with -n/-p on 1.9.
* Decide how to guard bugs that are regressions. IOW, if a bug appears in 1.9
but not in 1.8, we should be able to guard it from 1.9 while still yielding to
1.8.
* Look at automating discovery of guarded bugs which have been fixed.  Use
* mocks for all Math functions that coerce with #to_f; currently a fixture
is used.
* Rational and Complex moved from library/ to core/ in 1.9. Where do we locate
* the tests?
* Confirm that 1.9 tags can be removed when the corresponding tests pass on
1.9 trunk.
* File ticket about ARGF#each_char, ARGF#each_byte, ARGF#chars, and ARGF#bytes
* returning nil on 1.9.
* Consider filing ticket about 1.8.6's ARGF#readlines returning nil at the end
of a stream. 1.8.7+ returns an empty Array, as the rdoc since 1.8.6 implies.
* File ticket: $ ruby86 -e 'p ARGF.skip'
-e:1:in `skip': undefined method `close' for false:FalseClass (NoMethodError)
  from -e:1
* File ticket: "ruby -e 'p ARGF.read; ARGF.skip'" raises "closed stream
(IOError)" when two files are given. ARGF#skip should be a no-op when there
are no more files.
* Determine correct behaviour of ARGF#skip, file ticket if necessary, then
update failing tests in core/argf/skip_spec.rb.
* The failing ARGF#lineno tests are due to a race-ish condition whereby if the
test is executed in the same run as other ARGF tests the #lineno value isn't
reset. This can be fixed by explicitly reseting #lineno in the test, but
that could mask another bug... Figure out who's to blame here.
* Refactor Kernel.require specification; it's messy and ungainly.

# 1.9
=========
* Methods expecting filenames or paths should call #to_path on non-String
arguments. Tests need adding, and tickets may need filing for non-conforming
methods.
* Methods that could modify a frozen receiver should raise RuntimeError, even
if the method's arguments are such that no modification would occur.
* The inclusion of 'rational' by default has resulted in ZeroDivisionErrors
being raised where they previously weren't. What is the rule of thumb in
determining whether this outcome is intentional?

## Rational
===========

 (All questions below were posed in:
<http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/23843>) 

* Determine whether Rational::Unify was intentionally removed.
* Determine whether Rational#new! was intentionally removed. If not, will
there be a method to construct a Rational object without simplifying its
arguments?
* Determine whether Rational#coerce is supposed to call #to_f on non-numeric
argument. 1.8 does.
* Determine whether Rational.allocate has intentionally been removed. Presumably
so because on 1.8 it creates Rational(nil, nil), which is illegal on 1.9.
* Determine whether Rational.reduce has intentionally been removed. Presumably
so because Rational() serves the same function.
* Determine whether Rational#inspect and #to_s are intentionally different on
1.9
