critical:Module#autoload? returns the name of the file that will be autoloaded
critical:Module#autoload? returns nil if no file has been registered for a constant
critical:Module#autoload registers a file to load the first time the named constant is accessed
critical:Module#autoload shares the autoload request across dup'ed copies of modules
fails:Module#autoload loads the registered constant when it is accessed
fails:Module#autoload loads the registered constant into a dynamically created class
fails:Module#autoload loads the registered constant into a dynamically created module
fails:Module#autoload loads the registered constant when it is opened as a class
fails:Module#autoload loads the registered constant when it is opened as a module
fails:Module#autoload loads the registered constant when it is inherited from
fails:Module#autoload loads the registered constant when it is included
fails:Module#autoload does not load the file if the file is manually required
fails:Module#autoload allows multiple autoload constants for a single file
fails:Module#autoload does not remove the constant from the constant table if load fails
fails:Module#autoload does not remove the constant from the constant table if the loaded files does not define it
fails:Module#autoload does not load the file when refering to the constant in defined?
fails:Module#autoload does not load the file when accessing the constants table of the module
fails:Module#autoload loads the file when opening a module that is the autoloaded constant
fails:Module#autoload raises a NameError when the autoload file did not define the constant and a module is opened with the same name
fails:Module#autoload raises a TypeError if opening a class with a different superclass than the class defined in the autoload file
fails:Module#autoload does not call Kernel#require or Kernel#load dynamically
