[X] implement super dispatch
[X] implement blocks
[X] implement dynamic strings
[X] implement exceptions
[X] implement 64-bit support
[/] optimized arithmetic operations
  [X] fixnums
  [ ] floats
  [ ] bignums (vectorization)
[X] method dispatch cache
[X] optimized recursive method dispatch
[ ] block inlining
[X] constant caching
[X] fast ivar access
[X] zero-cost exceptions
[ ] make returns in blocks and try/catches use zero-cost exceptions
[X] fast #send
[ ] fast regexp =~
[X] fast break
[X] optimized Symbol's #== #=== #!= when both operands are constants
[ ] write a pass manager to eliminate unnecessary arrays generated by massigns
[ ] Array and Hash subclasses to hold immediate Ruby objects without boxing
[/] implement backtracing/symbolication
[/] port all rb_define_method() calls to rb_objc_define_method()

    - replace calls to rb_define_method() with a call to
      rb_objc_define_method() and rewrite the function to 
      conform to the following signatures:

      // if arity -2
      VALUE foo(VALUE recv, SEL sel, VALUE args);

      // if arity -1
      VALUE foo(VALUE recv, SEL sel, int argc, VALUE *argv);

      // if arity 0
      VALUE foo(VALUE recv, SEL sel);

      // if arity 1
      VALUE foo(VALUE recv, SEL sel, VALUE arg1);

      // if arity 2
      VALUE foo(VALUE recv, SEL sel, VALUE arg1, VALUE arg2);

      // etc.

      In the case of rb_define_global_function(), replace it by
      rb_objc_define_method(rb_mKernel, ...)

      In the case of rb_define_singleton_method(), replace it by
      rb_objc_define_method(*(VALUE *)klass, ...)

      In the case of rb_define_alloc_func(), replace it by
      rb_objc_define_method(*(VALUE *)klass, "alloc", ..., 0)

[/] port all rb_funcall() calls to rb_vm_call()
[X] port all rb_block_call() calls to rb_objc_block_call()
[X] remove the YARV code from the project
[X] refactor the VM sources
[X] clean objc.m
[ ] new IO
  [/] reimplement all IOs using CFStreams
  [X] clean string.c (remove previous bytestring stuff)
[/] implement eval/binding (irb)
[X] implement the BridgeSupport plumbing
[ ] implement threading
  [ ] Thread
  [ ] light threading
[ ] rubyspec
  [ ] make regexp specs pass so mspec tools work
  [/] integrate
  [ ] pass the 1.9 specs
[/] all core-features benchmarks should run faster than yarv
[ ] Integration
  [ ] Get basic test frameworks to run
    [ ] test/unit
    [ ] test/spec
    [ ] mocha
  [X] known_bugs
